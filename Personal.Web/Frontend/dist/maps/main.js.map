{"version":3,"sources":["Frontend/main/core/services/cec.crud.js","Frontend/main/core/services/cec.resource.js"],"names":["angular","module","factory","$resource","getFor","entityType","config","params","url","query","method","isArray","update","displayFor","$uibModal","apiConfig","this","form","$scope","$routeScope","$routeParams","resourceFactory","display","resource","get","data","rowHeader","list","me","create","conditionEqual","queryCondition","editUrl","window","location","href","updateRows","Loader","Show","decorate","rows","Hide","directive","resourceService","link","scope","element","attrs","parts","split","Get","value","resourceSelector","find","resourceTag","attr","text","service","$http","getValue","resourceSet","name","i","length","_key","_value","resources","loadings","waiters","type","callback","hasOwnProperty","push","then","w","waiter"],"mappings":"AAAAA,QACKC,OAAO,cAAe,eACtBC,QAAQ,kBAAmB,SAAUC,GAClC,OACIC,OAAQ,SAAUC,EAAYC,GAC1B,GAAKA,GAMD,IAAKA,EAAOC,OACR,KAAM,+DANVD,IACIE,IAAK,GACLD,UASR,OAAOJ,GAAU,QAAUE,EAAa,IAAMC,EAAOE,IAAKF,EAAOC,QAC7DE,OACIC,OAAQ,MACRC,SAAS,GAEbC,QACIF,OAAQ,UAIpBG,WAAY,SAAUR,GAElB,MAAOF,GAAU,8BAAgCE,OAI5DH,QAAQ,oBAAqB,SAAUY,GACpC,OACIV,OAAQ,SAAUC,EAAYU,EAAWR,GACrC,MAAO,IAAI,YACPS,KAAKC,KAAO,SAAUC,EAAQC,EAAaC,EAAcC,GACrD,KAAM,6BA2BVL,KAAKM,QAAU,SAAUJ,EAAQG,GAC7B,GAAIE,GAAWF,EAAgBR,WAAWR,EAC1CkB,GAASC,IAAIjB,EAAQ,SAASkB,GAC1BP,EAAOQ,UAAYD,KAI3BT,KAAKW,KAAO,SAAUT,EAAQC,EAAaC,EAAcC,GACrD,GAAIE,GAAWF,EAAgBjB,OAAOC,EAAYU,GAC9Ca,EAAKZ,IAETE,GAAOW,OAAS,WACZD,EAAGX,KAAKC,EAAQC,EAAaC,EAAcC,IAG/CH,EAAOY,eAAiB,WAAc,OAAO,GAC7CZ,EAAOa,eAAiB,WAAc,UAEtCb,EAAOc,QAAUC,OAAOC,SAASC,KAEjCjB,EAAOkB,WAAa,WACZlB,EAAOY,mBAIXO,OAAOC,OACPf,EAASd,MAAMS,EAAOa,qBAAwB,SAAUN,GACpDP,EAAOqB,UAAYrB,EAAOqB,SAASd,GACnCP,EAAOsB,KAAOf,EACdY,OAAOI;AC9FvCzC,QACKC,OAAO,mBACPyC,UAAU,WAAY,SAAUC,GAC7B,OAKIC,KAAM,SAAUC,EAAOC,EAASC,GAC5B,GAAIC,GAAQD,EAAMxB,SAAS0B,MAAM,SACjCN,GAAgBO,IAAIF,EAAM,GAAIA,EAAM,GAAI,SAAUG,GAE1CJ,EAAMK,mBACNN,EAAUA,EAAQO,KAAKN,EAAMK,mBAG7BL,EAAMO,YACNR,EAAQS,KAAKR,EAAMO,YAAaH,GAEhCL,EAAQU,KAAKL,SAMhCM,QAAQ,kBAAmB,SAAUC,GAIlC,QAASC,GAASC,EAAaC,GAC3B,IAAK,GAAIC,GAAI,EAAGA,EAAIF,EAAYG,OAAQD,IAAK,CACzC,GAAIvC,GAAWqC,EAAYE,EAC3B,IAAIvC,EAASyC,OAASH,EAClB,MAAOtC,GAAS0C,QAN5B,GAAIC,MAWAC,KACAC,IAEJpD,MAAKkC,IAAM,SAAUmB,EAAMR,EAAMS,GAC7B,MAAIJ,GAAUK,eAAeF,OACzBC,GAASX,EAASO,EAAUG,GAAOR,IAInCM,EAASE,OACTD,GAAQC,GAAMG,MAAOF,SAAUA,EAAUT,KAAMA,KAInDM,EAASE,IAAQ,EACjBD,EAAQC,UAERX,GAAMlC,IAAI,iBAAmB6C,GACxBI,KAAK,SAAUhD,GACZA,EAAOA,EAAKA,KACZyC,EAAUG,GAAQ5C,EAClB6C,EAASX,EAASlC,EAAMoC,GAGxB,KAAK,GADDa,GAAIN,EAAQC,GACPP,EAAI,EAAGA,EAAIY,EAAEX,OAAQD,IAAK,CAC/B,GAAIa,GAASD,EAAEZ,EACfa,GAAOL,SAASX,EAASlC,EAAMkD,EAAOd,UATlDH,SAYW,WACHY,EAAS,WAbjBZ,WAea,WACLS,EAASE,IAAQ","file":"main.js","sourcesContent":["angular\r\n    .module('cec.server', ['ngResource'])\r\n    .factory('resourceFactory', function ($resource) {\r\n        return {\r\n            getFor: function (entityType, config) {\r\n                if (!config) {\r\n                    config = {\r\n                        url: '',\r\n                        params: {},\r\n                    };\r\n                } else {\r\n                    if (!config.params) {\r\n                        throw \"config must look like this: {url: ':id', { 'id': '@id'}}\";\r\n                    }\r\n                }\r\n\r\n                // TODO: provide debug json fallback here\r\n                return $resource('/api/' + entityType + '/' + config.url, config.params, {\r\n                    query: {\r\n                        method: 'GET',\r\n                        isArray: true\r\n                    },\r\n                    update: {\r\n                        method: 'PUT'\r\n                    }\r\n                });\r\n            },\r\n            displayFor: function (entityType) {\r\n                // TODO: provide debug json fallback here\r\n                return $resource('/api/metadata/displaynames/' + entityType);\r\n            }\r\n        };\r\n    })\r\n    .factory('controllerFactory', function ($uibModal) {\r\n        return {\r\n            getFor: function (entityType, apiConfig, params) {\r\n                return new (function () {\r\n                    this.form = function ($scope, $routeScope, $routeParams, resourceFactory) {\r\n                        throw 'Not implemented exception';\r\n                        var modalInstance = $uibModal.open({\r\n                            templateUrl: '/Crud/Save/' + entityType,\r\n                            /*\r\n                            controller: controller,\r\n                            resolve: {\r\n                                modal: function () {\r\n                                    return $uibModal;\r\n                                },\r\n                                model: function () {\r\n                                    return model;\r\n                                },\r\n                                callback: function () {\r\n                                    return callback;\r\n                                },\r\n                                api: function () {\r\n                                    return apiName;\r\n                                }\r\n                            }\r\n                            */\r\n                        });\r\n\r\n                        modalInstance.opened.then(function () {\r\n                            Loader.Hide();\r\n                        });\r\n                    };\r\n\r\n                    this.display = function ($scope, resourceFactory) {\r\n                        var resource = resourceFactory.displayFor(entityType);\r\n                        resource.get(params, function(data) {\r\n                            $scope.rowHeader = data;\r\n                        });\r\n                    };\r\n\r\n                    this.list = function ($scope, $routeScope, $routeParams, resourceFactory) {\r\n                        var resource = resourceFactory.getFor(entityType, apiConfig);\r\n                        var me = this;\r\n\r\n                        $scope.create = function () {\r\n                            me.form($scope, $routeScope, $routeParams, resourceFactory);\r\n                        };\r\n\r\n                        $scope.conditionEqual = function () { return false; };\r\n                        $scope.queryCondition = function () { return {}; };\r\n\r\n                        $scope.editUrl = window.location.href;\r\n                        // TODO: promise ???\r\n                        $scope.updateRows = function () {\r\n                            if ($scope.conditionEqual()) {\r\n                                return;\r\n                            }\r\n\r\n                            Loader.Show();\r\n                            resource.query($scope.queryCondition() || {}, function (data) {\r\n                                $scope.decorate && $scope.decorate(data);\r\n                                $scope.rows = data;\r\n                                Loader.Hide();\r\n                            });\r\n                        };\r\n\r\n                    };\r\n\r\n                })();\r\n            }\r\n        }\r\n    });","angular\r\n    .module('cec.resource', [])\r\n    .directive(\"resource\", function (resourceService) {\r\n        return {\r\n            //scope: {\r\n            //    resource: \"@\",\r\n            //    resouceTag: \"@\"\r\n            //},\r\n            link: function (scope, element, attrs) {\r\n                var parts = attrs.resource.split(/\\.(.+)/);\r\n                resourceService.Get(parts[0], parts[1], function (value) {\r\n\r\n                    if (attrs.resourceSelector) {\r\n                        element = element.find(attrs.resourceSelector);\r\n                    }\r\n\r\n                    if (attrs.resourceTag) {\r\n                        element.attr(attrs.resourceTag, value);\r\n                    } else {\r\n                        element.text(value);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    })\r\n    .service('resourceService', function ($http) {\r\n\r\n        var resources = {};\r\n\r\n        function getValue(resourceSet, name) {\r\n            for (var i = 0; i < resourceSet.length; i++) {\r\n                var resource = resourceSet[i];\r\n                if (resource._key === name) {\r\n                    return resource._value;\r\n                }\r\n            }\r\n        }\r\n\r\n        var loadings = {};\r\n        var waiters = {};\r\n\r\n        this.Get = function (type, name, callback) {\r\n            if (resources.hasOwnProperty(type)) {\r\n                callback(getValue(resources[type], name));\r\n                return;\r\n            }\r\n\r\n            if (loadings[type]) {\r\n                waiters[type].push({ callback: callback, name: name });\r\n                return;\r\n            }\r\n\r\n            loadings[type] = true;\r\n            waiters[type] = [];\r\n\r\n            $http.get('/api/resource/' + type)\r\n                .then(function (data) {\r\n                    data = data.data;\r\n                    resources[type] = data;\r\n                    callback(getValue(data, name));\r\n\r\n                    var w = waiters[type];\r\n                    for (var i = 0; i < w.length; i++) {\r\n                        var waiter = w[i];\r\n                        waiter.callback(getValue(data, waiter.name));\r\n                    }\r\n                })\r\n                .catch(function() {\r\n                    callback('error');\r\n                })\r\n                .finally(function () { // Always\r\n                    loadings[type] = false;\r\n                });\r\n        };\r\n    });"],"sourceRoot":"/source/"}